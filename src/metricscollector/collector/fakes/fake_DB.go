// This file was generated by counterfeiter
package fakes

import (
	"metricscollector/db"
	"metricscollector/metrics"
	"sync"
)

type FakeDB struct {
	RetrieveMetricsStub        func(appid string, name string, start int64, end int64) ([]*metrics.Metric, error)
	retrieveMetricsMutex       sync.RWMutex
	retrieveMetricsArgsForCall []struct {
		appid string
		name  string
		start int64
		end   int64
	}
	retrieveMetricsReturns struct {
		result1 []*metrics.Metric
		result2 error
	}
	SaveMetricStub        func(metric *metrics.Metric) error
	saveMetricMutex       sync.RWMutex
	saveMetricArgsForCall []struct {
		metric *metrics.Metric
	}
	saveMetricReturns struct {
		result1 error
	}
	PruneMetricsStub        func(before int64) error
	pruneMetricsMutex       sync.RWMutex
	pruneMetricsArgsForCall []struct {
		before int64
	}
	pruneMetricsReturns struct {
		result1 error
	}
	GetAppIdsStub        func() (map[string]bool, error)
	getAppIdsMutex       sync.RWMutex
	getAppIdsArgsForCall []struct{}
	getAppIdsReturns     struct {
		result1 map[string]bool
		result2 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeDB) RetrieveMetrics(appid string, name string, start int64, end int64) ([]*metrics.Metric, error) {
	fake.retrieveMetricsMutex.Lock()
	fake.retrieveMetricsArgsForCall = append(fake.retrieveMetricsArgsForCall, struct {
		appid string
		name  string
		start int64
		end   int64
	}{appid, name, start, end})
	fake.recordInvocation("RetrieveMetrics", []interface{}{appid, name, start, end})
	fake.retrieveMetricsMutex.Unlock()
	if fake.RetrieveMetricsStub != nil {
		return fake.RetrieveMetricsStub(appid, name, start, end)
	} else {
		return fake.retrieveMetricsReturns.result1, fake.retrieveMetricsReturns.result2
	}
}

func (fake *FakeDB) RetrieveMetricsCallCount() int {
	fake.retrieveMetricsMutex.RLock()
	defer fake.retrieveMetricsMutex.RUnlock()
	return len(fake.retrieveMetricsArgsForCall)
}

func (fake *FakeDB) RetrieveMetricsArgsForCall(i int) (string, string, int64, int64) {
	fake.retrieveMetricsMutex.RLock()
	defer fake.retrieveMetricsMutex.RUnlock()
	return fake.retrieveMetricsArgsForCall[i].appid, fake.retrieveMetricsArgsForCall[i].name, fake.retrieveMetricsArgsForCall[i].start, fake.retrieveMetricsArgsForCall[i].end
}

func (fake *FakeDB) RetrieveMetricsReturns(result1 []*metrics.Metric, result2 error) {
	fake.RetrieveMetricsStub = nil
	fake.retrieveMetricsReturns = struct {
		result1 []*metrics.Metric
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) SaveMetric(metric *metrics.Metric) error {
	fake.saveMetricMutex.Lock()
	fake.saveMetricArgsForCall = append(fake.saveMetricArgsForCall, struct {
		metric *metrics.Metric
	}{metric})
	fake.recordInvocation("SaveMetric", []interface{}{metric})
	fake.saveMetricMutex.Unlock()
	if fake.SaveMetricStub != nil {
		return fake.SaveMetricStub(metric)
	} else {
		return fake.saveMetricReturns.result1
	}
}

func (fake *FakeDB) SaveMetricCallCount() int {
	fake.saveMetricMutex.RLock()
	defer fake.saveMetricMutex.RUnlock()
	return len(fake.saveMetricArgsForCall)
}

func (fake *FakeDB) SaveMetricArgsForCall(i int) *metrics.Metric {
	fake.saveMetricMutex.RLock()
	defer fake.saveMetricMutex.RUnlock()
	return fake.saveMetricArgsForCall[i].metric
}

func (fake *FakeDB) SaveMetricReturns(result1 error) {
	fake.SaveMetricStub = nil
	fake.saveMetricReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDB) PruneMetrics(before int64) error {
	fake.pruneMetricsMutex.Lock()
	fake.pruneMetricsArgsForCall = append(fake.pruneMetricsArgsForCall, struct {
		before int64
	}{before})
	fake.recordInvocation("PruneMetrics", []interface{}{before})
	fake.pruneMetricsMutex.Unlock()
	if fake.PruneMetricsStub != nil {
		return fake.PruneMetricsStub(before)
	} else {
		return fake.pruneMetricsReturns.result1
	}
}

func (fake *FakeDB) PruneMetricsCallCount() int {
	fake.pruneMetricsMutex.RLock()
	defer fake.pruneMetricsMutex.RUnlock()
	return len(fake.pruneMetricsArgsForCall)
}

func (fake *FakeDB) PruneMetricsArgsForCall(i int) int64 {
	fake.pruneMetricsMutex.RLock()
	defer fake.pruneMetricsMutex.RUnlock()
	return fake.pruneMetricsArgsForCall[i].before
}

func (fake *FakeDB) PruneMetricsReturns(result1 error) {
	fake.PruneMetricsStub = nil
	fake.pruneMetricsReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDB) GetAppIds() (map[string]bool, error) {
	fake.getAppIdsMutex.Lock()
	fake.getAppIdsArgsForCall = append(fake.getAppIdsArgsForCall, struct{}{})
	fake.recordInvocation("GetAppIds", []interface{}{})
	fake.getAppIdsMutex.Unlock()
	if fake.GetAppIdsStub != nil {
		return fake.GetAppIdsStub()
	} else {
		return fake.getAppIdsReturns.result1, fake.getAppIdsReturns.result2
	}
}

func (fake *FakeDB) GetAppIdsCallCount() int {
	fake.getAppIdsMutex.RLock()
	defer fake.getAppIdsMutex.RUnlock()
	return len(fake.getAppIdsArgsForCall)
}

func (fake *FakeDB) GetAppIdsReturns(result1 map[string]bool, result2 error) {
	fake.GetAppIdsStub = nil
	fake.getAppIdsReturns = struct {
		result1 map[string]bool
		result2 error
	}{result1, result2}
}

func (fake *FakeDB) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *FakeDB) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeDB) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.retrieveMetricsMutex.RLock()
	defer fake.retrieveMetricsMutex.RUnlock()
	fake.saveMetricMutex.RLock()
	defer fake.saveMetricMutex.RUnlock()
	fake.pruneMetricsMutex.RLock()
	defer fake.pruneMetricsMutex.RUnlock()
	fake.getAppIdsMutex.RLock()
	defer fake.getAppIdsMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.DB = new(FakeDB)
