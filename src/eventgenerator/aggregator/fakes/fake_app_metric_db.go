// This file was generated by counterfeiter
package fakes

import (
	"db"
	"eventgenerator/model"
	"sync"
)

type FakeAppMetricDB struct {
	SaveAppMetricStub        func(appMetric *model.AppMetric) error
	saveAppMetricMutex       sync.RWMutex
	saveAppMetricArgsForCall []struct {
		appMetric *model.AppMetric
	}
	saveAppMetricReturns struct {
		result1 error
	}
	CloseStub        func() error
	closeMutex       sync.RWMutex
	closeArgsForCall []struct{}
	closeReturns     struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppMetricDB) SaveAppMetric(appMetric *model.AppMetric) error {
	fake.saveAppMetricMutex.Lock()
	fake.saveAppMetricArgsForCall = append(fake.saveAppMetricArgsForCall, struct {
		appMetric *model.AppMetric
	}{appMetric})
	fake.recordInvocation("SaveAppMetric", []interface{}{appMetric})
	fake.saveAppMetricMutex.Unlock()
	if fake.SaveAppMetricStub != nil {
		return fake.SaveAppMetricStub(appMetric)
	} else {
		return fake.saveAppMetricReturns.result1
	}
}

func (fake *FakeAppMetricDB) SaveAppMetricCallCount() int {
	fake.saveAppMetricMutex.RLock()
	defer fake.saveAppMetricMutex.RUnlock()
	return len(fake.saveAppMetricArgsForCall)
}

func (fake *FakeAppMetricDB) SaveAppMetricArgsForCall(i int) *model.AppMetric {
	fake.saveAppMetricMutex.RLock()
	defer fake.saveAppMetricMutex.RUnlock()
	return fake.saveAppMetricArgsForCall[i].appMetric
}

func (fake *FakeAppMetricDB) SaveAppMetricReturns(result1 error) {
	fake.SaveAppMetricStub = nil
	fake.saveAppMetricReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppMetricDB) Close() error {
	fake.closeMutex.Lock()
	fake.closeArgsForCall = append(fake.closeArgsForCall, struct{}{})
	fake.recordInvocation("Close", []interface{}{})
	fake.closeMutex.Unlock()
	if fake.CloseStub != nil {
		return fake.CloseStub()
	} else {
		return fake.closeReturns.result1
	}
}

func (fake *FakeAppMetricDB) CloseCallCount() int {
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return len(fake.closeArgsForCall)
}

func (fake *FakeAppMetricDB) CloseReturns(result1 error) {
	fake.CloseStub = nil
	fake.closeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppMetricDB) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.saveAppMetricMutex.RLock()
	defer fake.saveAppMetricMutex.RUnlock()
	fake.closeMutex.RLock()
	defer fake.closeMutex.RUnlock()
	return fake.invocations
}

func (fake *FakeAppMetricDB) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ db.AppMetricDB = new(FakeAppMetricDB)
